# A connection to a list of items.
type attorneysConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [attorneysEdge]
  total: Int
}

enum attorneysConnectionOrder {
  ID
}

# An edge in a connection.
type attorneysEdge {
  # The item at the end of the edge
  node: Party

  # A cursor for use in pagination
  cursor: String!
}

type Case {
  id: String!
  case_id: Int
  import_date: String
  unique_value: String
  case_number: String
  arbitration_board: String
  initiating_party: String
  source_of_authority: String
  dispute_type: String
  dispute_subtype: String
  salary_range: String
  prevailing_party: String
  filing_date: String
  close_date: String
  type_of_disposition: String
  claim_amount_business: String
  fee_allocation_business: String
  fees_business: String
  award_amount_business: Int
  attorney_fees_business: Int
  other_relief_business: String
  claim_amount_consumer: String
  fee_allocation_consumer: String
  fees_consumer: String
  award_amount_consumer: Int
  attorney_fees_consumer: Int
  other_relief_consumer: String
  consumer_rep_state: String
  consumer_self_represented: Boolean
  document_only_proceeding: Boolean
  type_of_hearing: String
  hearing_addr1: String
  hearing_addr2: String
  hearing_city: String
  hearing_state: String
  hearing_zip: String
  arb_count: Int
  med_count: Int
  arb_or_cca_count: Int
  adr_process: String
  created_at: String!
  updated_at: String!
  Parties(after: String, first: Int, before: String, last: Int, orderBy: [casePartyConnectionOrder]): casePartyConnection
}

type CaseParty {
  type: String
  case_id: String!
  party_id: Int!
  firm_id: Int
  party_name: String
  firm_name: String
  party_slug: String
  firm_slug: String
  date: String
  fees: Int
  created_at: String!
  updated_at: String!
  Case: Case
  Party: Party
  Firm: Party
}

# A connection to a list of items.
type casePartyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [casePartyEdge]
  total: Int
}

enum casePartyConnectionOrder {
  ID
}

# An edge in a connection.
type casePartyEdge {
  # The item at the end of the edge
  node: CaseParty

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type casesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [casesEdge]
  total: Int
}

enum casesConnectionOrder {
  ID
}

# An edge in a connection.
type casesEdge {
  # The item at the end of the edge
  node: CaseParty

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type firmCasesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [firmCasesEdge]
  total: Int
}

enum firmCasesConnectionOrder {
  ID
}

# An edge in a connection.
type firmCasesEdge {
  # The item at the end of the edge
  node: CaseParty

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type firmsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [firmsEdge]
  total: Int
}

enum firmsConnectionOrder {
  ID
}

# An edge in a connection.
type firmsEdge {
  # The item at the end of the edge
  node: Party

  # A cursor for use in pagination
  cursor: String!
}

# The `JSON` scalar type represents raw JSON as values.
scalar JSON

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Party {
  id: Int!
  type: String
  name: String
  slug: String
  aggregate_data: JSON
  created_at: String!
  updated_at: String!
  Cases(after: String, first: Int, before: String, last: Int, orderBy: [casesConnectionOrder]): casesConnection
  FirmCases(after: String, first: Int, before: String, last: Int, orderBy: [firmCasesConnectionOrder]): firmCasesConnection
  Attorneys(after: String, first: Int, before: String, last: Int, orderBy: [attorneysConnectionOrder]): attorneysConnection
  Firms(after: String, first: Int, before: String, last: Int, orderBy: [firmsConnectionOrder]): firmsConnection
}

type Query {
  Summary(name: String!): Summary
  Search(query: String!): Search
  Cases(
    limit: Int
    order: String

    # A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    where: JSON
    offset: Int
  ): [Case]
  Parties(
    limit: Int
    order: String

    # A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    where: JSON
    offset: Int
  ): [Party]
  Case(id: ID!): Case
  Party(id: ID, slug: String): Party
}

type ResultEdge {
  cursor: String
  node: ResultNode
}

type ResultNode {
  type: String!
  id: Int!
  slug: String
  document: JSON
  vector: String
  index: String
}

type Results {
  total: Int
  page: Int
  pages: Int
  perPage: Int
  hasPrevPage: Boolean
  hasNextPage: Boolean
  edges: [ResultEdge]
}

type Search {
  query: String
  Results(page: Int = 1, perPage: Int = 20, sortBy: String, sortDir: SortDir = ASC): Results
}

enum SortDir {
  ASC
  DESC
}

type Summary {
  name: String!
  data: JSON
}
